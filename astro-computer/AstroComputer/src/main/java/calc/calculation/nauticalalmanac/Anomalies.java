package calc.calculation.nauticalalmanac;

public class Anomalies {
	// Astronomical functions
	// Nutation, obliquity of the ecliptic
	public static void nutation() {
		// IAU 1980 nutation theory:
		// Mean anomaly of the Moon
		double Mm = 134.962981389 + 198.867398056 * Context.TE + Utils.trunc(477000 * Context.TE) + 0.008697222222 * Context.TE2 + Context.TE3 / 56250D;

		// Mean anomaly of the Sun
		double M = 357.527723333 + 359.05034 * Context.TE + Utils.trunc(35640 * Context.TE) - 0.0001602777778 * Context.TE2 - Context.TE3 / 300000D;

		// Mean distance of the Moon from ascending node
		double F = 93.271910277 + 82.017538055 * Context.TE + Utils.trunc(483120 * Context.TE) - 0.0036825 * Context.TE2 + Context.TE3 / 327272.7273;

		// Mean elongation of the Moon
		double D = 297.850363055 + 307.11148 * Context.TE + Utils.trunc(444960 * Context.TE) - 0.001914166667 * Context.TE2 + Context.TE3 / 189473.6842;

		// Longitude of the ascending node of the Moon
		double omega = 125.044522222 - 134.136260833 * Context.TE - Utils.trunc(1800 * Context.TE) + 0.002070833333 * Context.TE2 + Context.TE3 / 450000D;

		// Periodic terms for nutation
		double[][] nut =
				{
						{0, 0, 0, 0, 1, -171996, -174.2, 92025, 8.9},
						{0, 0, 2, -2, 2, -13187, -1.6, 5736, -3.1},
						{0, 0, 2, 0, 2, -2274, -0.2, 977, -0.5},
						{0, 0, 0, 0, 2, 2062, 0.2, -895, 0.5},
						{0, -1, 0, 0, 0, -1426, 3.4, 54, -0.1},
						{1, 0, 0, 0, 0, 712, 0.1, -7, 0.0},
						{0, 1, 2, -2, 2, -517, 1.2, 224, -0.6},
						{0, 0, 2, 0, 1, -386, -0.4, 200, 0.0},
						{1, 0, 2, 0, 2, -301, 0.0, 129, -0.1},
						{0, -1, 2, -2, 2, 217, -0.5, -95, 0.3},
						{-1, 0, 0, 2, 0, 158, 0.0, -1, 0.0},
						{0, 0, 2, -2, 1, 129, 0.1, -70, 0.0},
						{-1, 0, 2, 0, 2, 123, 0.0, -53, 0.0},
						{1, 0, 0, 0, 1, 63, 0.1, -33, 0.0},
						{0, 0, 0, 2, 0, 63, 0.0, -2, 0.0},
						{-1, 0, 2, 2, 2, -59, 0.0, 26, 0.0},
						{-1, 0, 0, 0, 1, -58, -0.1, 32, 0.0},
						{1, 0, 2, 0, 1, -51, 0.0, 27, 0.0},
						{-2, 0, 0, 2, 0, -48, 0.0, 1, 0.0},
						{-2, 0, 2, 0, 1, 46, 0.0, -24, 0.0},
						{0, 0, 2, 2, 2, -38, 0.0, 16, 0.0},
						{2, 0, 2, 0, 2, -31, 0.0, 13, 0.0},
						{2, 0, 0, 0, 0, 29, 0.0, -1, 0.0},
						{1, 0, 2, -2, 2, 29, 0.0, -12, 0.0},
						{0, 0, 2, 0, 0, 26, 0.0, -1, 0.0},
						{0, 0, 2, -2, 0, -22, 0.0, 0, 0.0},
						{-1, 0, 2, 0, 1, 21, 0.0, -10, 0.0},
						{0, 2, 0, 0, 0, 17, -0.1, 0, 0.0},
						{0, 2, 2, -2, 2, -16, 0.1, 7, 0.0},
						{-1, 0, 0, 2, 1, 16, 0.0, -8, 0.0},
						{0, 1, 0, 0, 1, -15, 0.0, 9, 0.0},
						{1, 0, 0, -2, 1, -13, 0.0, 7, 0.0},
						{0, -1, 0, 0, 1, -12, 0.0, 6, 0.0},
						{2, 0, -2, 0, 0, 11, 0.0, 0, 0.0},
						{-1, 0, 2, 2, 1, -10, 0.0, 5, 0.0},
						{1, 0, 2, 2, 2, -8, 0.0, 3, 0.0},
						{0, -1, 2, 0, 2, -7, 0.0, 3, 0.0},
						{0, 0, 2, 2, 1, -7, 0.0, 3, 0.0},
						{1, 1, 0, -2, 0, -7, 0.0, 0, 0.0},
						{0, 1, 2, 0, 2, 7, 0.0, -3, 0.0},
						{-2, 0, 0, 2, 1, -6, 0.0, 3, 0.0},
						{0, 0, 0, 2, 1, -6, 0.0, 3, 0.0},
						{2, 0, 2, -2, 2, 6, 0.0, -3, 0.0},
						{1, 0, 0, 2, 0, 6, 0.0, 0, 0.0},
						{1, 0, 2, -2, 1, 6, 0.0, -3, 0.0},
						{0, 0, 0, -2, 1, -5, 0.0, 3, 0.0},
						{0, -1, 2, -2, 1, -5, 0.0, 3, 0.0},
						{2, 0, 2, 0, 1, -5, 0.0, 3, 0.0},
						{1, -1, 0, 0, 0, 5, 0.0, 0, 0.0},
						{1, 0, 0, -1, 0, -4, 0.0, 0, 0.0},
						{0, 0, 0, 1, 0, -4, 0.0, 0, 0.0},
						{0, 1, 0, -2, 0, -4, 0.0, 0, 0.0},
						{1, 0, -2, 0, 0, 4, 0.0, 0, 0.0},
						{2, 0, 0, -2, 1, 4, 0.0, -2, 0.0},
						{0, 1, 2, -2, 1, 4, 0.0, -2, 0.0},
						{1, -1, 0, -1, 0, -3, 0.0, 0, 0.0},
						{-1, -1, 2, 2, 2, -3, 0.0, 1, 0.0},
						{0, -1, 2, 2, 2, -3, 0.0, 1, 0.0},
						{1, -1, 2, 0, 2, -3, 0.0, 1, 0.0},
						{3, 0, 2, 0, 2, -3, 0.0, 1, 0.0},
						{-2, 0, 2, 0, 2, -3, 0.0, 1, 0.0},
						{1, 0, 2, 0, 0, 3, 0.0, 0, 0.0},
						{-1, 0, 2, 4, 2, -2, 0.0, 1, 0.0},
						{1, 0, 0, 0, 2, -2, 0.0, 1, 0.0},
						{-1, 0, 2, -2, 1, -2, 0.0, 1, 0.0},
						{0, -2, 2, -2, 1, -2, 0.0, 1, 0.0},
						{-2, 0, 0, 0, 1, -2, 0.0, 1, 0.0},
						{2, 0, 0, 0, 1, 2, 0.0, -1, 0.0},
						{3, 0, 0, 0, 0, 2, 0.0, 0, 0.0},
						{1, 1, 2, 0, 2, 2, 0.0, -1, 0.0},
						{0, 0, 2, 1, 2, 2, 0.0, -1, 0.0},
						{1, 0, 0, 2, 1, -1, 0.0, 0, 0.0},
						{1, 0, 2, 2, 1, -1, 0.0, 1, 0.0},
						{1, 1, 0, -2, 1, -1, 0.0, 0, 0.0},
						{0, 1, 0, 2, 0, -1, 0.0, 0, 0.0},
						{0, 1, 2, -2, 0, -1, 0.0, 0, 0.0},
						{0, 1, -2, 2, 0, -1, 0.0, 0, 0.0},
						{1, 0, -2, 2, 0, -1, 0.0, 0, 0.0},
						{1, 0, -2, -2, 0, -1, 0.0, 0, 0.0},
						{1, 0, 2, -2, 0, -1, 0.0, 0, 0.0},
						{1, 0, 0, -4, 0, -1, 0.0, 0, 0.0},
						{2, 0, 0, -4, 0, -1, 0.0, 0, 0.0},
						{0, 0, 2, 4, 2, -1, 0.0, 0, 0.0},
						{0, 0, 2, -1, 2, -1, 0.0, 0, 0.0},
						{-2, 0, 2, 4, 2, -1, 0.0, 1, 0.0},
						{2, 0, 2, 2, 2, -1, 0.0, 0, 0.0},
						{0, -1, 2, 0, 1, -1, 0.0, 0, 0.0},
						{0, 0, -2, 0, 1, -1, 0.0, 0, 0.0},
						{0, 0, 4, -2, 2, 1, 0.0, 0, 0.0},
						{0, 1, 0, 0, 2, 1, 0.0, 0, 0.0},
						{1, 1, 2, -2, 2, 1, 0.0, -1, 0.0},
						{3, 0, 2, -2, 2, 1, 0.0, 0, 0.0},
						{-2, 0, 2, 2, 2, 1, 0.0, -1, 0.0},
						{-1, 0, 0, 0, 2, 1, 0.0, -1, 0.0},
						{0, 0, -2, 2, 1, 1, 0.0, 0, 0.0},
						{0, 1, 2, 0, 1, 1, 0.0, 0, 0.0},
						{-1, 0, 4, 0, 2, 1, 0.0, 0, 0.0},
						{2, 1, 0, -2, 0, 1, 0.0, 0, 0.0},
						{2, 0, 0, 2, 0, 1, 0.0, 0, 0.0},
						{2, 0, 2, -2, 1, 1, 0.0, -1, 0.0},
						{2, 0, -2, 0, 1, 1, 0.0, 0, 0.0},
						{1, -1, 0, -2, 0, 1, 0.0, 0, 0.0},
						{-1, 0, 0, 1, 1, 1, 0.0, 0, 0.0},
						{-1, -1, 0, 2, 1, 1, 0.0, 0, 0.0},
						{0, 1, 0, 1, 0, 1, 0.0, 0, 0.0}
				};

		//Reading periodic terms
		double fMm, fM, fF, fD, f_omega, dp = 0, de = 0;

		for (double[] doubles : nut) {
			fMm = doubles[0];
			fM = doubles[1];
			fF = doubles[2];
			fD = doubles[3];
			f_omega = doubles[4];
			dp += ((doubles[5] + Context.TE * doubles[6]) * Math.sin(Math.toRadians(fD * D + fM * M + fMm * Mm + fF * F + f_omega * omega)));
			de += ((doubles[7] + Context.TE * doubles[8]) * Math.cos(Math.toRadians(fD * D + fM * M + fMm * Mm + fF * F + f_omega * omega)));
		}

    /*
     //Corrections (Herring, 1987)
     var corr = new Array(4);
     corr[0] = " 0 0 0 0 1-725 417 213 224 ";
     corr[1] = " 0 1 0 0 0 523  61 208 -24 ";
     corr[2] = " 0 0 2-2 2 102-118 -41 -47 ";
     corr[3] = " 0 0 2 0 2 -81   0  32   0 ";

     x=0;
     while (x<4)
     {
        fMm = eval(corr[x].substring(0,2));
        fM = eval(corr[x].substring(2,4));
        fF = eval(corr[x].substring(4,6));
        fD = eval(corr[x].substring(6,8));
        f_omega = eval(corr[x].substring(8,10));
        dp += 0.1*(eval(corr[x].substring(10,14))*sind(fD*D+fM*M+fMm*Mm+fF*F+f_omega*omega)+eval(corr[x].substring(14,18))*cosd(fD*D+fM*M+fMm*Mm+fF*F+f_omega*omega));
        de += 0.1*(eval(corr[x].substring(18,22))*cosd(fD*D+fM*M+fMm*Mm+fF*F+f_omega*omega)+eval(corr[x].substring(22,26))*sind(fD*D+fM*M+fMm*Mm+fF*F+f_omega*omega));
        x++;
      }
      */

		// Nutation in longitude
		Context.delta_psi = dp / 36_000_000D;

		// Nutation in obliquity
		Context.delta_eps = de / 36_000_000D;

		// Mean obliquity of the ecliptic
		Context.eps0 = (84_381.448 - 46.815 * Context.TE - 0.00059 * Context.TE2 + 0.001813 * Context.TE3) / 3_600D;

		// True obliquity of the ecliptic
		Context.eps = Context.eps0 + Context.delta_eps;
	}

	// Aberration
	public static void aberration() {
		Context.kappa = Math.toRadians(20.49552) / 3600D;
		Context.pi0 = Math.toRadians(102.93735 + 1.71953 * Context.TE + 0.00046 * Context.TE2);
		Context.e = 0.016708617 - 0.000042037 * Context.TE - 0.0000001236 * Context.TE2;
	}
}
