buildscript {
    ext.kotlin_version = '1.5.20' // '1.4.0'  // '1.3.72'
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
//        classpath "com.netflix.nebula:nebula-clojure-plugin:4.3.1"
    }
}

apply plugin: 'kotlin'
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'scala'
//apply plugin: "nebula.clojure" // Incompatible with gradle 5.x
apply plugin: "idea"

group = 'oliv.raspi.coffee'
version = '1.0'

repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/groups/public" }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'org.codehaus.groovy:groovy-all:2.4.6'
    implementation 'org.codehaus.groovy:http-builder:0.4.0'
    implementation 'javax.ws.rs:javax.ws.rs-api:2.0'
//    implementation 'org.glassfish.jersey.core:jersey-client:2.10'
    implementation 'org.scala-lang:scala-library:2.13.3'
    implementation "org.scala-lang:scala-compiler:2.13.3"
    implementation 'com.typesafe.akka:akka-actor_2.11:2.3.11'
//    compile.sh 'org.clojure:clojure:1.5.1'

    implementation 'org.graalvm.js:js:21.1.0'
    implementation 'org.graalvm.js:js-scriptengine:21.1.0'

    implementation 'org.glassfish.jersey.core:jersey-client:2.25.1'
    implementation 'org.glassfish.jersey.media:jersey-media-json-jackson:2.25.1'

    implementation 'com.pi4j:pi4j-core:1.2'

    implementation project(':I2C-SPI')
    implementation project(':MindWave')
    implementation project(':SevenSegDisplay')
}

//sourceSets {
//    main {
//        groovy {
//            srcDirs = ['src/groovy']
//        }
//        java {
//            srcDirs = ['src/java']
//        }
//        scala {
//            srcDirs = ['src/scala']
//        }
//        kotlin {
//            srcDirs = ['src/kotlin']
//        }
//        clojure {
//            srcDirs = ['src/clojure']
//        }
//    }
//}

//compileClojure {
//    dependsOn 'compileJava'
//}

compileScala {
  options.compilerArgs << "-feature"
}

task runScript(type: JavaExec) {
    description 'Run Groovy script'
    // Set main property to name of Groovy script class.
    main = 'mainBasic'
    // Set classpath for running the Groovy script.
    classpath = sourceSets.main.runtimeClasspath
}
task runRPiScript(type: JavaExec) {
    description 'Run Groovy script'
    // Set main property to name of Groovy script class.
    main = 'mainRPi'
    // Set classpath for running the Groovy script.
    classpath = sourceSets.main.runtimeClasspath
}

task runJava(type: JavaExec) {
    description "Run Groovy from Java"
    main = 'jsr223.ScriptEngineFactories'
    classpath = sourceSets.main.runtimeClasspath
}

task runJAXRSScript(type: JavaExec) {
    description 'Run JAX-RS from Groovy script'
    main = 'JAXRSClient'
    classpath = sourceSets.main.runtimeClasspath
    if (project.hasProperty('key')) { // gradlew -Pkey=XXXXX runJAXRSScript
        args ('key:' + project.getProperty('key'))
    }
}

task interactive(type: JavaExec, dependsOn: classes, description: 'Runs an interactice Scala console app') {
    main = 'serial.SerialPI4J'
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

task runHelloActor(type: JavaExec, dependsOn: classes, description: 'Runs the Scala Actors app') {
    main = 'HelloActor'
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

task runDLListener(type: JavaExec, dependsOn: classes, description: 'Runs the Scala Actors app, with DeadLetter detection') {
    main = 'DLListener'
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

task runClock(type: JavaExec, dependsOn: classes, description: 'Runs the SevenSegment Clock, from Scala') {
    main = 'sevenseg.Clock'
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}

// Run like this: gradle repl --console plain --no-daemon
task repl(type:JavaExec) {
    description 'Scala REPL. Run like this: gradle repl --console plain --no-daemon'
    main = "scala.tools.nsc.MainGenericRunner"
    classpath = sourceSets.main.runtimeClasspath
    standardInput System.in
    args '-usejavacp'
}
