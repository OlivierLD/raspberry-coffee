plugins {
    id 'java'
    id 'scala'
    id 'idea'
    id 'maven'
    id 'com.github.johnrengelman.shadow' // version '4.0.2'
}

group = 'oliv.raspi.coffee'
version = '1.0'

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://mvnrepository.com/artifact" }
    maven { url "https://www.datanucleus.org/downloads/maven2" }
    maven { url "https://oss.sonatype.org/content/groups/public" }
    // maven { url "https://raw.githubusercontent.com/OlivierLD/raspberry-coffee/repository" }  // maven repo in git
}

//compileJava.options.compilerArgs += ["-Xlint:none"]
compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

dependencies {
    implementation 'com.pi4j:pi4j-core:1.2' // 2.1.1' Warning: 'com.pi4j.io.i2c.I2CFactory' seems not to be inversion 2.1.1
    implementation 'org.rxtx:rxtx:2.1.7'
    implementation 'org.scala-lang:scala-library:2.13.8'
    implementation "org.scala-lang:scala-compiler:2.13.3"
    implementation 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.0.2'
    // implementation 'org.java-websocket:Java-WebSocket:1.3.7'
    implementation 'org.java-websocket:Java-WebSocket:1.5.2'
    implementation 'com.google.code.gson:gson:2.8.0'
    implementation 'org.fusesource.jansi:jansi:1.11'
    implementation 'oracle:xmlparser:2.0'
    implementation 'org.yaml:snakeyaml:1.21'
    implementation group: 'org.xerial', name: 'sqlite-jdbc', version: '3.34.0'
    implementation group: 'org.json', name: 'json', version: '20190722'
    implementation project(':raspberry-sailor:NMEA-Parser')
    implementation project(':http-tiny-server')
    implementation project(':common-utils')
    implementation project(':raspberry-io-pi4j:I2C-SPI')
//    implementation 'astro.computer:astro.computer:1.0'
    implementation project(':astro-computer:AstroComputer')
//    implementation project(':SunFlower')
//    implementation project(':GPS.sun.servo')
//    implementation project(':LoRa')    // Needed for a publisher
}

shadowJar {
    zip64 true
}

task runLogAnalyzer(type: JavaExec) {
    description 'Analyze a log file. Use gradlew runLogAnalyzer -Pdatafile=[datafile.nmea]'
    main = 'util.LogAnalyzer'
    classpath = sourceSets.main.runtimeClasspath
    // Another syntax to try:
    //     args project.findProperty('datafile') ?: './default-data-file.nmea'
    if (project.hasProperty('datafile')) { // gradlew -Pdatafile=XXXXX runLogAnalyzer
        args (project.getProperty('datafile'))
    }
}
