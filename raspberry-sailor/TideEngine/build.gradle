plugins {
  id 'java'
//id 'scala'
  id 'idea'
  id 'maven' // Includes 'gradle install'. 'maven-publish' would say 'gradle publish'
  id 'com.github.johnrengelman.shadow' // version '4.0.2'
//id 'findbugs'
}

group = 'oliv.raspi.sailor'
version = '1.0'

//compileJava.options.compilerArgs += ["-Xlint:unchecked"]  // ["-Xlint:none"]
compileJava {
    options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
}

jar {
  from('src/main/resources') {
    include '**/*.*'
  }
}

repositories {
  mavenCentral()
  mavenLocal()
  maven { url "https://www.datanucleus.org/downloads/maven2" }
  maven { url "https://mvnrepository.com/artifact" }
  // maven { url "https://raw.githubusercontent.com/OlivierLD/raspberry-coffee/repository" }  // maven repo in git
}

dependencies {
  implementation 'com.google.code.gson:gson:2.8.0'
  implementation 'org.fusesource.jansi:jansi:1.11'
  implementation 'oracle:xmlparser:2.0'
//  implementation project(':common-utils')
  implementation project(':astro-computer:AstroComputer')
  implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.0'
  implementation group: 'org.xerial', name: 'sqlite-jdbc', version: '3.34.0'
  implementation 'org.glassfish.jersey.core:jersey-client:2.25.1'
  implementation 'org.glassfish.jersey.media:jersey-media-json-jackson:2.25.1'
  testImplementation 'junit:junit:4.13.1'
}

shadowJar {
  zip64 true
}

//tasks.withType(FindBugs) {
//  reports {
//    xml.enabled false
//    html.enabled true
////  html.stylesheet resources.text.fromFile('config/xsl/findbugs-custom.xsl')
//  }
//}

// See https://docs.gradle.org/4.1/dsl/org.gradle.api.plugins.quality.FindBugsExtension.html
//findbugs {
//  toolVersion = "2.0.1"
//  sourceSets = [sourceSets.main]
//  ignoreFailures = true
//  reportsDir = file("$project.buildDir/findbugsReports")
//  effort = "min"
//  reportLevel = "high"
////  visitors = ["FindSqlInjection", "SwitchFallthrough"]
////  omitVisitors = ["FindNonShortCircuit"]
////  includeFilter = file("$rootProject.projectDir/config/findbugs/includeFilter.xml")
////  excludeFilter = file("$rootProject.projectDir/config/findbugs/excludeFilter.xml")
////  excludeBugsFilter = file("$rootProject.projectDir/config/findbugs/excludeBugsFilter.xml")
//}

task harmonicsXML(type: JavaExec, dependsOn: build, description: "Generate the XML Document from the harmonic files") {
  classpath = configurations.runtime
//classpath project.configurations.default
//classpath sourceSets.main.output.classesDir
  classpath sourceSets.main.runtimeClasspath
  main = 'utils.HarmonicsToXML'
  jvmArgs "-Xms512m"
  jvmArgs "-Xmx1024m"
//args "none", "nothing", "needed"
//standardInput System.in
//jvmArgs "-Dverbose=true"
//if (project.hasProperty('key')) { // gradlew -Pkey=XXXXX runJAXRSScript
//  args ('key:' + project.getProperty('key'))
//}
  systemProperty 'verbose', 'true'
  workingDir "."
}

harmonicsXML.doFirst {
  println "--------------------------------------------------------------------------------------"
  println ">>> Run like this: gradlew harmonicsXML [--console plain] --no-daemon"
  println "--------------------------------------------------------------------------------------"
}

