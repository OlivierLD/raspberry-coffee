buildscript {
    ext.kotlin_version = '1.6.0' // '1.8.10'
    ext.shadowVersion = '6.0.0'
    repositories {
        google()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
//        maven { url "https://mvnrepository.com/artifact/org.jetbrains.kotlin/kotlin-gradle-plugin" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'com.github.johnrengelman.shadow'

java {
    sourceCompatibility = JavaVersion.toVersion('11')
    targetCompatibility = JavaVersion.toVersion('11')
}

shadowJar {
    zip64 true
}

group = 'oliv.raspi.coffee'
version = '1.0'

repositories {
    mavenLocal()
    mavenCentral()
    // maven { url "https://mvnrepository.com/artifact/org.jetbrains.kotlin/kotlin-gradle-plugin" }
}

//compileJava.options.encoding = 'ISO-8859-1'
compileJava.options.compilerArgs += ["-Xlint:unchecked"]  // ["-Xlint:none"]

dependencies {
//  implementation project(':http-tiny-server')
    implementation 'org.json:json:20190722'
    testImplementation "junit:junit:$junit_version"
    testImplementation 'org.glassfish.jersey.media:jersey-media-json-jackson:2.25.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}

def testNum = '01'

task runSample(type: JavaExec, dependsOn: build, description: "Swing UI 3D box samples. Use -Pnum=[01..11] (default 01)") {
//  environment "DISPLAY", ":0.0"
//  environment "DISPLAY", "192.168.42.31:0.0"
//  classpath = configurations.runtime
//  classpath project.configurations.default
//  classpath sourceSets.main.output.classesDir
    classpath sourceSets.test.runtimeClasspath
    mainClass = 'gsg.examples.box3d.Sample' + testNum  // Default 01, see above
    if (project.hasProperty('num')) { // gradlew -Pnum=XX runSample
        testNum = project.getProperty('num')
        println ">>> Running test ${testNum}, ${name}"
        mainClass = 'gsg.examples.box3d.Sample' + testNum
    }

    if (testNum == '11') {
        // For Sample11, use ../gradlew runSample -Pnum=11 -PappArgs="--justTheBoat=false --drawFrameCtrlPoints=true --symmetrical=false --frameIncrement=50 --water-lines=true --buttocks=true"
        println ">> For Sample11, use ../gradlew runSample -Pnum=11 \\ "
        println "        -PappArgs=\"--justTheBoat=false "
        println "                   --drawFrameCtrlPoints=true "
        println "                   --symmetrical=false "
        println "                   --frameIncrement=50 "
        println "                   --water-lines=true "
        println "                   --buttocks=true\""
    }

    if (project.hasProperty("appArgs")) {
        appArgs = project.getProperty("appArgs")
        args appArgs.split()
    }
    if (project.hasProperty("idx")) { // For Sample09, file index parameter: ../gradlew runSample -Pnum=09 -Pidx=4.
        // idx: obj file index.
        def idx = project.getProperty("idx")
        args += ["--idx:${idx}"]
    }
    workingDir "."
}

def bezierTestNum = '01'

task runBezierSample(type: JavaExec, dependsOn: build, description: "See how a Bezier works. Use -Pnum=[01..02] (default 01)") {
    // println("Task [${name}]: Yoho!!")
//  environment "DISPLAY", ":0.0"
//  environment "DISPLAY", "192.168.42.31:0.0"
//  classpath = configurations.runtime
//  classpath project.configurations.default
//  classpath sourceSets.main.output.classesDir
    classpath sourceSets.test.runtimeClasspath
    mainClass = 'gsg.examples.wb.bezier.BeziersAtWorkSample' + bezierTestNum  // Default 01, see above
    if (project.hasProperty('num')) { // gradlew runBezierSample -Pnum=XX
        bezierTestNum = project.getProperty('num')
        if (false && name == "runBezierSample") {
            if (!"01".equals(bezierTestNum) && !"02".equals(bezierTestNum)) {
                println("-------------------------------")
                println("Error >>> 01 or 02 only please.")
                println("-------------------------------")
                System.exit(1)
            } else {
                println ">>> Running test " + bezierTestNum
                mainClass = 'gsg.examples.wb.bezier.BeziersAtWorkSample' + bezierTestNum
            }
        }
    } else {
        if (name == "runBezierSample") {
            println ">>> Running test " + bezierTestNum
        }
    }
    println "--- Use the [Animate] button to see the Bezier progressing."
    workingDir "."
}

task runSample2(type: JavaExec, dependsOn: build, description: "Swing UI sample. Lowpass") {
//    println "In case of problem edit the Gradle script and make sure the DISPLAY variable is set correctly"
//  environment "DISPLAY", ":0.0"
//  environment "DISPLAY", "192.168.42.31:0.0"
//  classpath = configurations.runtime
//  classpath project.configurations.default
//  classpath sourceSets.main.output.classesDir
    classpath sourceSets.test.runtimeClasspath
    mainClass = 'gsg.examples.wb.lowpass.SwingSample10'
    workingDir "."
}

task runSample3(type: JavaExec, dependsOn: build, description: "Swing UI sample. Bezier.") {
//    println "In case of problem edit the Gradle script and make sure the DISPLAY variable is set correctly"
//  environment "DISPLAY", ":0.0"
//  environment "DISPLAY", "192.168.42.31:0.0"
//  classpath = configurations.runtime
//  classpath project.configurations.default
//  classpath sourceSets.main.output.classesDir
    classpath sourceSets.test.runtimeClasspath
    mainClass = 'gsg.examples.wb.bezier.SwingSample11'
    workingDir "."
}

task runSample4(type: JavaExec, dependsOn: build, description: "Swing UI sample. 2 Bezier curves.") {
//    println "In case of problem edit the Gradle script and make sure the DISPLAY variable is set correctly"
//  environment "DISPLAY", ":0.0"
//  environment "DISPLAY", "192.168.42.31:0.0"
//  classpath = configurations.runtime
//  classpath project.configurations.default
//  classpath sourceSets.main.output.classesDir
    classpath sourceSets.test.runtimeClasspath
    mainClass = 'gsg.examples.wb.bezier.SwingSample12'
    workingDir "."
}

build.doFirst {
    println "In case of problem edit the Gradle script and make sure the DISPLAY variable is set correctly"
    println ""
    println "Task runSample:"
    println "01: 3D Plan triangle, AfterDraw"
    println "02: 3D pyramid, animated"
    println "03: 3D cubes, boxes, arrows"
    println "04: 3D boxes and segments"
    println "05: 3D vectors, sum of vectors, animated"
    println "06: 3D vectors and sums, draggable, with widgets"
    println "07: 3D spring, draggable, with widgets"
    println "08: 3D boxes, scaled, translated, draggable, with widgets"
    println "09: 3D wavefront (.obj), draggable, widgets. Use -Pidx=[0..7]"
    println "10: First 3D Bezier sample, draggable, widgets"
    println "11: Small 3D Bezier boat, draggable, widgets, xLabel Tx"

    println ""
    println "Task runBezierSample:"
    println "See how a Bezier works. Use -Pnum=[01..02] (default 01)"
    println "In case of problem edit the Gradle script and make sure the DISPLAY variable is set correctly"
    println "01: 2D Bezier, with 3 Ctrl Points"
    println "02: 2D Bezier, with 4 Ctrl Points"
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "11" // "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "11" // "1.8"
    }
}