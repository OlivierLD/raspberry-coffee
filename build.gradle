plugins {
  id 'java'
  id 'scala'
  id 'idea'
  id 'maven'
  id 'com.github.johnrengelman.shadow' version '6.0.0'  // '5.2.0'
}

//compileJava.options.encoding = 'ISO-8859-1'
compileJava.options.compilerArgs += ["-Xlint:unchecked"]

group = 'oliv.raspi.coffee'
version = '1.0'

// sourceCompatibility = 1.8
// targetCompatibility = 1.8

tasks.withType(JavaCompile) {
  if (JavaVersion.current() != project.targetCompatibility) {
//    throw new GradleException(
    println "+------ Warning: Java version (JAVA_HOME) possible mismatch -----\n" +
            "| In task $name ($project.name), the java version used ${JavaVersion.current()} is not the expected version ${project.targetCompatibility}.\n" +
            "+----------------------------------------------------------------"
//    )
  } else {
    println ">> From task $name (in $project.name), using java version ${JavaVersion.current()} "
  }
  options.encoding = 'UTF-8'
}

dependencies {
    // none
}

repositories {
    mavenLocal()
    mavenCentral()
//    // maven { url "https://raw.githubusercontent.com/OlivierLD/raspberry-coffee/repository" }
    // maven { url "http://lediouris.net/maven2" }
//    maven { url "https://plugins.gradle.org/m2/" }
//    maven { url "https://www.datanucleus.org/downloads/maven2" } // Contains xmlparserv2 from Oracle
    maven { url "https://mvnrepository.com/artifact" }
//    maven { url "https://oss.sonatype.org/content/groups/public" } // PI4J ?
}

tasks.register('info') {
    // See this https://docs.gradle.org/current/userguide/tutorial_using_tasks.html
    println "+------------------- B U I L D   I N F O R M A T I O N ---------------------------------"
    println "| This (root) build file allows you to validate the whole project ($project.name) "
    println "| Note that all sub-modules can be built independently, like (for example) : "
    println "| \$ cd RESTNavServer "
    println "| \$ ../gradlew clean build "
    println "| or "
    println "| \$ ../gradlew clean shadowJar "
    println "+---------------------------------------------------------------------------------------"
    println "| >>> You may want to comment or uncomment several modules in 'settings.gradle':"
    println "|     - opencv"
    println "|     - Project-Trunk:REST-clients:REST-assembler:springboot-sensors"
    println "| Also, depending on your environment, scala nd kotlin steps might be too demanding..."
    println "| If needed, you can exclude them, like in ./gradlew clean build -x :<module-name>:compileScala "
    println "|   -x :RasPISamples:compileScala " +
                "-x :OtherJVMLanguages:compileScala " +
                "-x :http-client-paradigm:compileScala " +
                "-x :http-client-paradigm:compileKotlin " +
                "-x :Project-Trunk:System-Languages:compileKotlin " +
                "-x :Project-Trunk:System-Languages:compileScala " +
                "-x :Project-Trunk:Weather-Station-Implementation:compileScala " +
                "-x :Project-Trunk:REST-clients:REST-assembler:compileScala " +
                "-x :Project-Trunk:REST-clients:REST-assembler:compileKotlin " +
                "-x :Project-Trunk:REST-clients:REST-assembler:compileScala"
    println "| On low-RAM boards, use --no-daemon, like in ./gradlew --no-daemon clean build "
    println "| "
    println "| Also consider trying ./gradlew clean build -x test "
    println "| If you've not installed opencv:"
    println "| Also you can try ./gradlew clean build [-x test] -x :opencv:compileJava -x :Project-Trunk:WebcamTemplate:compileJava"
    println "+---------------------------------------------------------------------------------------"
    println " ... and the --continue flag is still available."
    println "+---------------------------------------------------------------------------------------"
    println "-- Note on OpenCV --"
    println " Projects opencv and Project-Trunk:WebcamTemplate use OpenCV "
    println " They require OpenCV to be installed, and they refer to OpenCV's jar files."
    println " In their gradle.build file, modify the variable opencvVersion, and possibly the location of the required jar-files"
    println "+---------------------------------------------------------------------------------------"
}

task printInfo() {
    dependsOn tasks.info
}

build.doFirst () {
    tasks.info
}

build.doLast() {
    println "Build is finished"
}
